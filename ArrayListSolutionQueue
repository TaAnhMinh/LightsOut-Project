import java.util.ArrayList;

/**
 * The class <b>ArrayListSolutionQueue</b>
 * is an implementation of the interface
 * <b>SolutionQueue</b> which relies on
 * an instance of <b>ArrayList&lt;Solution&gt;</b>
 * to store the elements of the queue.
 *
 * @author Ta Anh Minh, 300078762, University Of Ottawa
 */
public class ArrayListSolutionQueue implements SolutionQueue {


    /**
     * <b>queue</b> stores the references of the elements
     * currentluy in the queue
     */
    private ArrayList<Solution> queue;

    /**
     * Constructor, initializes  <b>queue</b>
     */
    public ArrayListSolutionQueue() {

        queue = new ArrayList<Solution> ();

    }

    /**
     * implementation of the method <b>enqueue</b>
     * from the interface <b>SolutionQueue</b>.
     * @param value
     *      The reference to the new element
     */
    public void enqueue(Solution value) {
    	if (value == null) {
    		System.out.println("The entered value is not acceptable, please check the code");
    	} else {
    		queue.add(value); // adding a solution into the list
    		for (int i = 0 ; i < queue.size() -1; i++) {
    			Solution temp = queue.get(queue.size() - i- 1);
    			queue.set(queue.size() - i - 1, queue.get(queue.size() - i- 2));
    			queue.set(queue.size() - i - 2, temp); // putting the element added to the front of the list (tail)
    		}
    	}
    }

    /**
     * implementation of the method <b>dequeue</b>
     * from the interface <b>SolutionQueue</b>.
     * @return
     *      The reference to removed Solution
     */
    public Solution dequeue() {
        if (queue.size() > 0) { // if the queue is empty
        	Solution remove = queue.get(queue.size()-1);
        	queue.remove(queue.size()-1); //remove the element at the head
        	return remove;
        } else {
        	System.out.println("There is nothing to remove in the queue");
        	return null;
        }

    }

    /**
     * implementation of the method <b>isEmpty</b>
     * from the interface <b>SolutionQueue</b>.
     * @return
     *      true if the queue is empty
     */
    public boolean isEmpty() {
    	if (queue.size() == 0) {
    		return true;
    	}
    	return false;
    }

}
