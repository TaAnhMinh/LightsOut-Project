import java.util.ArrayList;


/**
 * The class <b>LightsOut</b> is the
 * class that implements the method to
 * computs solutions of the Lights Out game.
 * It contains the main of our application.
 *
 * @author Ta Anh Minh, 300078762, University of Ottawa
 */

public class LightsOut {
    /**
     * The method <b>solve</b> finds all the
     * solutions to the <b>Lights Out</b> game
     * for an initially completely ``off'' board
     * of size <b>widthxheight</b>, using a
     * Breadth-First Search algorithm.
     *
     * It returns an <b>ArrayList&lt;Solution&gt;</b>
     * containing all the valid solutions to the
     * problem.
     *
     * During the computation of the solution, the
     * method prints out a message each time a new
     * solution  is found, along with the total time
     * it took (in milliseconds) to find that solution.
     *
     * @param width
     *  the width of the board
     * @param height
     *  the height of the board
     * @return
     *  an instance of <b>ArrayList&lt;Solution&gt;</b>
     * containing all the solutions
     */
    public static ArrayList<Solution> solve (int width, int height){
    	ArrayListSolutionQueue partialSolutions = new ArrayListSolutionQueue ();
    	ArrayList<Solution> solutions = new ArrayList<Solution>();
    	Solution current = new Solution(width,height);
    	Solution current2;
        partialSolutions.enqueue(current);
        long startTime = System.currentTimeMillis();

        while(partialSolutions.isEmpty() == false) {
        	current = partialSolutions.dequeue(); //current contains null solution
        	current2 = new Solution(current);
        	if (current.isReady()) {
        		if (current.isSuccessful()){
        			solutions.add(current);
        			long endTime = System.currentTimeMillis();
        			System.out.print("Solution found in ");
        			System.out.println(endTime - startTime);
        		}
        	}else {
        		if (current.Height > 0) {
        			if (current.stillPossible(true)) {
        				current.setNext(true);
        				partialSolutions.enqueue(current);
        			}
        			if (current.stillPossible(false)) {
        				current2.setNext(false);
        				partialSolutions.enqueue(current2);
        			}
        		}else {
        			current.setNext(true);
        			current2.setNext(false);
        			partialSolutions.enqueue(current);
            		partialSolutions.enqueue(current2);
        		}


        	}
        }
       return solutions;
    }

    /**
     * <b>main</b> method  calls the method <b>solve</b>
     * and then prints out the number of solutions found,
     * as well as the details of each solution.
     *
     * The <b>width</b> and <b>height</b> used by the
     * main are passed as runtime parameters to
     * the program. If no runtime parameters are passed
     * to the program, or if the parameters are incorrect,
     * then the default values are used.
     *
     * @param args
     *  Strings array of runtime parameters
     */
    public static void main(String[] args) {

        StudentInfo1.display();
        ArrayList<Solution> solution = solve(Integer.parseInt(args[0]),Integer.parseInt(args[1]));
        for (int i =0; i < solution.size(); i++) {
        	System.out.println("***");
        	System.out.println(solution.get(i));
        }
        System.out.println("In a board of " + Integer.parseInt(args[0]) + " x " + Integer.parseInt(args[1]) + ":" + "  " + solution.size() + " solutions");
    }
}
